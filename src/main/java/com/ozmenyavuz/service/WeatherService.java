package com.ozmenyavuz.service;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.ozmenyavuz.constans.WeatherApiProperties;
import com.ozmenyavuz.dto.WeatherDto;
import com.ozmenyavuz.dto.WeatherResponse;
import com.ozmenyavuz.model.WeatherEntity;
import com.ozmenyavuz.repository.WeatherRepository;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Optional;

@Service
public class WeatherService {

    private final WeatherRepository weatherRepository; // Spring
    private final RestTemplate restTemplate; // Spring
    private final WeatherApiProperties weatherApiProperties; //
    private final ObjectMapper objectMapper = new ObjectMapper(); // Spring

    public WeatherService(WeatherRepository weatherRepository,
                          RestTemplate restTemplate,
                          WeatherApiProperties weatherApiProperties) {
        this.weatherRepository = weatherRepository;
        this.restTemplate = restTemplate;
        this.weatherApiProperties = weatherApiProperties;
    }


    // 1 ANA METOT

    public WeatherDto getWeatherByCityName(String city) {
        Optional<WeatherEntity> weatherEntityOptional =
                weatherRepository.findFirstByRequestedCityNameOrderByLocalDateTimeDesc(city);
        //SELECT * FROM weather WHERE city = ? ORDER BY local_time DESC LIMIT 1 gibi bir SQL

        return weatherEntityOptional.map(weather -> {
            boolean isOld = weather.getLocalDateTime() // Verinin sisteme kaydedildiƒüi zamanƒ± d√∂nd√ºr√ºr.
                    .isBefore(
                            LocalDateTime.now().minusMinutes(30)); //≈ûu anki zaman/   Cache 30 dakika √∂ncesine bir zaman hesaplƒ±yoruz.
            if (isOld) {
                return WeatherDto.convert(getWeatherFromWeatherStack(city));
            }
            // 	Eƒüer veri 30 dakikadan eskiyse, API‚Äôye yeni istek g√∂nderilir:
            //	‚Ä¢	getWeatherFromWeatherStack(city): WeatherStack API‚Äôden g√ºncel veri √ßeker.
            //	‚Ä¢	WeatherDto.convert(...): Dƒ±≈ü API‚Äôden gelen WeatherEntity nesnesi, DTO‚Äôya √ßevrilip d√∂nd√ºr√ºl√ºr.

            return WeatherDto.convert(weather); // VERI GUNCELSE veri WeatherDto‚Äôya √ßevrilerek d√∂nd√ºr√ºl√ºr.
        }).orElseGet(() -> WeatherDto.convert(getWeatherFromWeatherStack(city))); // HIC KAYIT YOKSA YINE DIS API YE GIT
    }


    // 2 GET ATAR SERVICE = WeatherStack API CEKME
    // üåç WeatherStack API‚Äôden g√ºncel hava durumu verisi alƒ±r ve i≈üleyip veritabanƒ±na kaydetmek √ºzere hazƒ±rlar.

    private WeatherEntity getWeatherFromWeatherStack(String city) {
        String fullUrl = getWeatherStackUrl(city); // Dƒ±≈ü API‚Äôye istek atmak i√ßin tam URL‚Äôyi √ºretir.
        ResponseEntity<String> responseEntity = restTemplate.getForEntity(fullUrl, String.class);
        //getForEntity ‚Üí dƒ±≈ü API‚Äôye GET isteƒüi atar

        String json = responseEntity.getBody();
        System.out.println("WeatherStack JSON Response: " + json);

        try {
            WeatherResponse weatherResponse = objectMapper.readValue(json, WeatherResponse.class); //  Jackson k√ºt√ºphanesinin JSON‚Äôƒ± Java nesnesine √ßevirmek

            if (weatherResponse == null || weatherResponse.location() == null || weatherResponse.current() == null) {
                throw new RuntimeException("Hatalƒ± veri geldi. API key doƒüru mu? ≈ûehir ge√ßerli mi?");
            }

            // JSON‚Äôdan elde edilen Java nesnesini veritabanƒ±na yazmak i√ßin saveWeatherEntity(...) metoduna g√∂nderiyoruz
            return saveWeatherEntity(city, weatherResponse); //API‚Äôden gelen doƒüru veri ≈üimdi veritabanƒ±na yazƒ±lacak
        } catch (JsonProcessingException e) {
            throw new RuntimeException("JSON parse hatasƒ±: " + e.getMessage(), e);
        }
    }

    // 3 DB‚Äôye Kaydetme Metodu
    // API‚Äôden gelen veriyi WeatherEntity nesnesine √ßevirip veritabanƒ±na kaydeder.

    private WeatherEntity saveWeatherEntity(String city, WeatherResponse weatherResponse) {
        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm"); //WeatherStack API tarihleri string olarak g√∂nderir, biz LocalDateTime‚Äôa √ßevirmek istiyoruz.

        WeatherEntity weatherEntity = new WeatherEntity(
                city,
                weatherResponse.location().name(), // sehir adi
                weatherResponse.location().country(), // ulkesi
                weatherResponse.current().temperature(), // sicaklik
                LocalDateTime.now(), // API√¢‚Ç¨‚Ñ¢nin verdi√Ñ≈∏i lokal saat (√É¬∂rn. "2025-04-02 13:00")
                LocalDateTime.parse(weatherResponse.location().localTime(), dateTimeFormatter)
        );

        return weatherRepository.save(weatherEntity); // Veritabanƒ±na Kaydet
        // 	‚Ä¢	Olu≈üturulan entity, veritabanƒ±na yazƒ±lƒ±r.
        //	‚Ä¢	Geriye kayƒ±t edilmi≈ü hali (ID dahil) d√∂nd√ºr√ºl√ºr.
    }

    // 4  Tam URL √úretici

    private String getWeatherStackUrl(String city) {
        return weatherApiProperties.buildUrlForCity(city);
    }
}

//package com.ozmenyavuz.service;
//
//
//import com.fasterxml.jackson.core.JsonProcessingException;
//import com.fasterxml.jackson.databind.ObjectMapper;
//import com.ozmenyavuz.dto.WeatherDto;
//import com.ozmenyavuz.dto.WeatherResponse;
//import com.ozmenyavuz.model.WeatherEntity;
//import com.ozmenyavuz.repository.WeatherRepository;
//import org.springframework.http.ResponseEntity;
//import org.springframework.stereotype.Service;
//import org.springframework.web.client.RestTemplate;
//
//import java.time.format.DateTimeFormatter;
//import java.util.Optional;
//
//@Service
//public class WearherService {
//
//    private static final String API_URL = "http://api.weatherstack.com/current?access_key=216142cadf02819e6f4b74ff41bd86be&query=Basel";
//
//    private final WeatherRepository weatherRepository;
//    private final RestTemplate restTemplate; //Senin uygulamanla dƒ±≈ü d√ºnyadaki ba≈üka bir servisi konu≈üturmak.
//    private final ObjectMapper objectMapper = new ObjectMapper();
//
//    public WearherService(WeatherRepository weatherRepository, RestTemplate restTemplate) {
//        this.weatherRepository = weatherRepository;
//        this.restTemplate = restTemplate;
//    }
//
//
//    public WeatherDto getWeatherByCityName(String city) {
//        Optional<WeatherEntity> weatherEntityOptional = weatherRepository.findFirstByRequestedCityNameOrderByLocalDateTimeDesc(city);
//        if (!weatherEntityOptional.isPresent()) {
//            return WeatherDto.convert(getWeatherFromWeatherStackt(city));
//        }
//        return WeatherDto.convert(weatherEntityOptional.get());
//
//    }
//
//    private WeatherEntity getWeatherFromWeatherStackt(String city) {
//        ResponseEntity<String> responseEntity = restTemplate.getForEntity(API_URL + city, String.class);
//        try {
//            WeatherResponse weatherResponse = objectMapper.readValue(responseEntity.getBody(), WeatherResponse.class);
//            return saveWeatherEntity(city, weatherResponse);
//        } catch (JsonProcessingException e) {
//            throw new RuntimeException(e);
//        }
//    }
//
//    private WeatherEntity saveWeatherEntity(String city, WeatherResponse weatherResponse) {
//        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm");
//        WeatherEntity weatherEntity = new WeatherEntity(
//                city,
//                weatherResponse.location().name(),
//                weatherResponse.location().country(),
//                weatherResponse.current().temperature(),
//                localDateTime.now(),
//                localDateTime.parse(weatherResponse.location().localTime(), dateTimeFormatter));
//        return weatherRepository.save(weatherEntity);
//
//    }
//
//}
